#usage "en: <b>Copy a given board to fill a panel. Panel size is given by user. Add panel borders if requested. Add gaps as requested. Add V-score lines and labels as requested.</b> PCBWay requires the user to create panels that are at least 75x75mm. If the panel is smaller than this they will reject it because their v-score machine can't handle it. This ULP takes a given design and replicates it until the panel is just over the dimensions specified by the user. It also adds dimension lines between copies and v-score text so that PCBWay knows where to v-score. This script will also detect overhanging parts and warn the user that gaps are needed. Script tries to identify the soldermask color based on the logos on the board (SparkFun vs SparkX vs LilyPad). Script looks for 0.8mm tag for thin boards. Script outputs a ordering_instructions.txt file containing all the characteristics of this panel."
"<p>Usage: run sparkfun-panelizer</p>"
"<p>Author: <author>Nathan Seidle &lt;inathan@sparkfun.com&gt;</author><br />"
"Version: <em>1.0</em></p>"

//Original board dimension code came from https://gist.github.com/itavero/8042433

string bigScript = ""; //The big string of commands that we will eventually run as a script

/*
	TODO
	
	Add radio button that swaps between mm and inch in GUI

*/

string configFile  = filesetext(argv[0], ".cfg");

//Config options we want to save
real		verticalGap			= 0.02; //PCBWay needs at least 0.02 inches between copies
real		horizontalGap		= 0.02;
real		panelSizeX			= 3.0;
real		panelSizeY			= 2.0;
int		vScoreIndicators	= 0;
int		drawPanelBorders 	= 0;
int 		runCAM					= 0;
int 		generateTopStencil = 0;
int 		generateBottomStencil = 0;

void configWrite(){
  output(configFile){
    printf("%.5f\n", verticalGap);
    printf("%.5f\n", horizontalGap);
    printf("%.5f\n", panelSizeX);
    printf("%.5f\n", panelSizeY);
    printf("%d\n", vScoreIndicators);
    printf("%d\n", drawPanelBorders);
    printf("%d\n", runCAM);
	printf("%d\n", generateTopStencil);
	printf("%d\n", generateBottomStencil);
  }
}

void configRead() {
  if(filesize(configFile)){ //Check if file exists
    string data[];
    int line = fileread(data, configFile);
    if(line >= 4){
      verticalGap				= strtod(data[0]);
      horizontalGap			= strtod(data[1]);
      panelSizeX				= strtod(data[2]);
      panelSizeY				= strtod(data[3]);
      vScoreIndicators		= strtol(data[4]);
      drawPanelBorders	= strtol(data[5]);
      runCAM					= strtol(data[6]);
      generateTopStencil	= strtol(data[7]);
      generateBottomStencil	= strtol(data[8]);
    }
  }
}

real copyOversizeAmount = 0.1;
real designWidth; //In inches
real designHeight;
real xMax = 0;
real yMax = 0;
real xMin = 0;
real yMin = 0;

real panelWidth = 0;
real panelHeight = 0;

string overHangingParts = "false";
real verticalGapNeeded = 0;
real horizontalGapNeeded = 0;

string panelFileLocation = "";

string bottomPackages = "";

//Finds a string in a string no matter where, no matter capitalization
int containsString(string toSearch, string toFind)
{
	int pos = strstr(strlwr(toSearch), strlwr(toFind));
	if(pos >= 0) //String found
	{
		return(1);
	}
	
	return(0);	
}

//Detect if board has four layers
int hasFourLayers()
{
	board(B) {
		B.layers(L) {
			if(L.used && L.number == 2)
			{
				return(1);
			}
			if(L.used && L.number == 15)
			{
				return(1);
			}
		}
	}
	return(0); //Nope
}

//Detect if parts are on a given layer of the board
int hasPartsOnLayer(int layerNumber)
{
	board(B) {
		B.elements(E) {
			E.package.contacts(C) {
				if (C.smd && C.smd.layer == layerNumber) {
					
					//Ignore
					//Fiducials, jumpers with traces as closure method, jumpers that are normally open
					if(containsString(E.package.name, "fiducial") == 0
						&& containsString(E.package.name, "NC_TRACE") == 0
						&& containsString(E.package.name, "NC_BY_TRACE") == 0
						&& containsString(E.package.name, "SJ_2S-NO") == 0
						&& containsString(E.package.name, "SMT-JUMPER") == 0
						) 
					{
						//String not found, this is a legit part
						bottomPackages += E.package.name + ",";
						return(1);
					}
				}
			}
		}
	}

	return(0); //Nope
}

//Detect if parts are on the top of the board
int hasTopParts()
{
	return(hasPartsOnLayer(1));
}

//Detect if parts are on the bottom of the board
int hasBottomParts()
{
	return(hasPartsOnLayer(16));
}

//Detect thickness of board. 
//If someone has put "0.8mm" in any of the text on the board then return 1.
//This is a bit of a hack but all thin SparkFun designs call out the thickness in the BRD file
string getBoardThickness()
{
	string boardThickness = "1.6mm";

	//Search the ordering instructions box
	board(B) {
		B.texts(T) {
			if(containsString(T.value, "0.8mm") == 1)
			{
				return("0.8mm");
			}
		}
	}
  
	return("1.6mm");
}

//Search through logos on board to determine if this is a SparkX board (black)
//SparkFun board (red), LilyPad (purple) or other (green as default)
string getBoardColor()
{
	int sparkxFound = 0;
	int sparkfunFound = 0;
	int lilypadFound = 0;
	int spectacleFound = 0;
	int microBitFound = 0;

	//Search the ordering instructions box
	board(B) {
		B.texts(T) {
			if(containsString(T.value, "Solder Mask") == 1)
			{
				if(containsString(T.value, "Matte Black") == 1)
				{
					return("Matte Black");
				}
				if(containsString(T.value, "Black") == 1)
				{
					return("Black");
				}
				if(containsString(T.value, "Purple") == 1)
				{
					return("Purple");
				}
			}
		}
	}
	
	board(B) {
		B.elements(E) {

			if(containsString(E.package.name, "SparkX") == 1) //String found
			{
				sparkxFound = 1;
			}

			if(containsString(E.package.name, "SparkFun") == 1 || containsString(E.package.name, "SFE") == 1) //String found
			{
				sparkfunFound = 1;
			}

			if(containsString(E.package.name, "Spectacle") == 1) //String found
			{
				spectacleFound = 1;
			}
			
			if(containsString(E.package.name, "LilyPad") == 1 || containsString(E.package.library, "LilyPad") == 1) //String found
			{
				lilypadFound = 1;
			}
		}
	}
	
	if(sparkxFound == 1 && sparkfunFound == 0 && lilypadFound == 0 && spectacleFound == 0)
	{
		return("Black");
	}
	if(sparkxFound == 0 && sparkfunFound == 1 && lilypadFound == 0 && spectacleFound == 0)
	{
		return("Red");
	}
	if(sparkxFound == 0 && sparkfunFound == 0 && lilypadFound == 1 && spectacleFound == 0)
	{
		return("Purple");
	}
	if(sparkxFound == 0 && sparkfunFound == 1 && lilypadFound == 0 && spectacleFound == 1)
	{
		return("Black");
	}
	
	string warning = "Not sure what board color to use.";
	if(sparkxFound == 1) warning += " SparkX found.";
	if(sparkfunFound == 1) warning += " SparkFun found.";
	if(lilypadFound == 1) warning += " LilyPad found.";
	if(spectacleFound == 1) warning += " Spectacle found.";
	if(sparkxFound == 0 && sparkfunFound == 0 && lilypadFound == 0 && spectacleFound == 0) warning += " No logos found.";
	
	warning += " Marking as unknown.";
	
	dlgMessageBox(warning);
	return("Unknown");
}

void panelizer() {
	
    string s = "";

	real borderWidth = 0;
	if(drawPanelBorders == 1) borderWidth = 0.25;

	//Calculate the number of copies we need to achieve our min panel size
	int numberOfColumns = ceil(panelSizeX / (designWidth + verticalGap));
	if(numberOfColumns * (designWidth + verticalGap) + verticalGap < panelSizeX) numberOfColumns++;
	
	int numberOfRows = ceil(panelSizeY / (designHeight + horizontalGap));
	if(numberOfRows * (designHeight + horizontalGap) + horizontalGap < panelSizeY) numberOfRows++;
	
	panelWidth = (designWidth + verticalGap) * numberOfColumns - verticalGap;
	panelWidth += borderWidth * 2;
	if(drawPanelBorders == 1) panelWidth += (verticalGap * 2);

	panelHeight = (designHeight + horizontalGap) * numberOfRows - horizontalGap;
	panelHeight += borderWidth * 2;
	if(drawPanelBorders == 1) panelHeight += (horizontalGap * 2);

    //Turn off all layers but the ones we want to copy
	//Include 2 and 15 (layers for four layer board)
    bigScript += "DISPLAY NONE; DISPLAY 1 2 15 16 17 18 20 21 22 23 24 45; DISPLAY -25 -26 -27 -28 -51;\n";

    //Draw a box slightly larger that the dimensions of the board
	real lowerX = xMin - copyOversizeAmount;
	real lowerY = yMin - copyOversizeAmount;
	real upperX = xMax + copyOversizeAmount;
	real upperY = yMax + copyOversizeAmount;
	
    bigScript += "GRID INCH 0.05 ON;\n";

    sprintf(s, "GROUP (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", lowerX, lowerY, upperX, lowerY, upperX, upperY, lowerX, upperY, lowerX, lowerY);
    bigScript += s;

    //Cut from the lower left corner of group
    sprintf(s, "CUT (%f %f);\n", xMin, yMin);
    bigScript += s;

	//Create new board file
    bigScript += "SET CONFIRM YES;\n";
    sprintf(s, "EDIT '%s';\n", panelFileLocation);
    bigScript += s;
    bigScript += "SET CONFIRM OFF;\n";

    //Go back to inch grid
	bigScript += "GRID INCH 0.05 ON;GRID ALT INCH 0.005;\n";

	//Turn on layers
    bigScript += "DISPLAY NONE; DISPLAY 1 2 15 16 17 18 20 21 22 23 24 45 51; DISPLAY -25 -26 -27 -28;\n";

	//Paste the copies to fill the panel
	real xCoord = 0;
	real yCoord = 0;
	for(int row = 0 ; row < numberOfRows ; row++)
	{
		for(int column = 0 ; column < numberOfColumns ; column++)
		{
			xCoord = (column * designWidth) + (column * verticalGap);
			yCoord = (row * designHeight) + (row * horizontalGap);

			bigScript += "SET CONFIRM YES;\n";
			sprintf(s, "PASTE (%f %f);\n", xCoord, yCoord);
			bigScript += s;
			bigScript += "SET CONFIRM OFF;\n";
			
			//Add 'route out' text if the gap between boards is large
			if(verticalGap > 0.05)
			{
				bigScript += "LAYER 20;\n"; //Dimension layer
				sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' R90 (%f %f);\n", xCoord - (verticalGap/2), yCoord + (designHeight/2));
				bigScript += s;

				if(column == numberOfColumns - 1) //Add last text
				{
					bigScript += "LAYER 20;\n"; //Dimension layer
					sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' R90 (%f %f);\n", xCoord + (verticalGap/2) + designWidth, yCoord + (designHeight/2));
					bigScript += s;
				}
			}

			if(horizontalGap > 0.05)
			{
				bigScript += "LAYER 20;\n"; //Dimension layer
				sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' (%f %f);\n", xCoord + (designWidth/2), yCoord - (horizontalGap/2));
				bigScript += s;
				
				if(row == numberOfRows - 1) //Add last text
				{
					bigScript += "LAYER 20;\n"; //Dimension layer
					sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' (%f %f);\n", xCoord + (designWidth/2), yCoord + (horizontalGap/2) + designHeight);
					bigScript += s;
				}
			}
		}
	}
	
	//Draw v-score lines between copies
	if(vScoreIndicators == 1)
	{
		bigScript += "LAYER 46;\n"; //Milling layer
		//We avoid drawing on the dimension layer because the Eagle to Charm conversion checks the board size
		//based on dimension artifacts
		
		//If the vertical gap is large enough for route outs don't draw v-score lines/text
		if(verticalGap < 0.05)
		{
			//Add vertical lines
			int column = 1;
			int linesToDraw = numberOfColumns;
			if(drawPanelBorders == 1)
			{
				column = 0;
				linesToDraw++;
			}
			for( ; column < linesToDraw ; column++)
			{
				xCoord = ((designWidth + (verticalGap / 2)) * column) + ((column-1) * (verticalGap / 2));

				real yCoordLow = 0;
				yCoordLow -= (borderWidth + horizontalGap);

				real yCoordHigh = (numberOfRows * designHeight) + (numberOfRows * horizontalGap) + 0.25;
				yCoordHigh += borderWidth; //Extend past the frame if exists

				sprintf(s, "WIRE 0.015 (%f %f) (%f %f);\n", xCoord, yCoordLow, xCoord, yCoordHigh);
				bigScript += s;

				//Add the word 'v-score' lines
				sprintf(s, "CHANGE ALIGN CENTER; TEXT v-score (%f %f);\n", xCoord, yCoordHigh  + 0.09);
				bigScript += s;
			}
		}

		//If the vertical gap is large enough for route outs don't draw v-score lines/text
		if(horizontalGap < 0.05)
		{
			//Add horizontal lines
			int row = 1;
			int linesToDraw = numberOfRows;
			if(drawPanelBorders == 1)
			{
				row = 0;
				linesToDraw++;
			}
			for( ; row < linesToDraw ; row++)
			{
				yCoord = ((designHeight + (horizontalGap / 2)) * row) + ((row-1) * (horizontalGap / 2));

				real xCoordLow = 0;
				xCoordLow -= (borderWidth + verticalGap);

				real xCoordHigh = (numberOfColumns * designWidth) + (numberOfColumns * verticalGap) + 0.25;
				xCoordHigh += borderWidth; //Extend past the frame if exists

				sprintf(s, "WIRE 0.015 (%f %f) (%f %f);\n", xCoordLow, yCoord, xCoordHigh, yCoord);
				bigScript += s;

				//Add the word 'v-score' lines
				sprintf(s, "CHANGE ALIGN CENTER; TEXT v-score (%f %f);\n", xCoordHigh + 0.3, yCoord);
				bigScript += s;
			}
		}
	}
	
	if(drawPanelBorders == 1)
	{
		//Add borders to four sides
		
		bigScript += "LAYER 20;\n"; //Dimension layer

		real panelWidth = (designWidth * numberOfColumns) + (verticalGap * (numberOfColumns - 1));
		real panelHeight = (designHeight * numberOfRows) + (horizontalGap * (numberOfRows - 1));

		//Draw lower box
		real lowerXleft = 0 - verticalGap - borderWidth;
		real lowerXright = panelWidth + borderWidth + verticalGap;
		real lowerYupper = 0 - horizontalGap;
		real lowerYlower = lowerYupper - borderWidth;
		
		sprintf(s, "WIRE 0.01 (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
		lowerXleft, lowerYupper, 
		lowerXright, lowerYupper,
		lowerXright, lowerYlower, 
		lowerXleft, lowerYlower,
		lowerXleft, lowerYupper
		);
		bigScript += s;

		//Draw right box
		real rightXleft = panelWidth + verticalGap;
		real rightXright = rightXleft + borderWidth;
		real rightYupper = panelHeight + horizontalGap - 0.02;
		real rightYlower = 0 - horizontalGap + 0.02;
		
		sprintf(s, "WIRE 0.01 (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
		rightXleft, rightYupper, 
		rightXright, rightYupper,
		rightXright, rightYlower, 
		rightXleft, rightYlower,
		rightXleft, rightYupper
		);
		bigScript += s;

		//Draw top box
		real topXleft = 0 - verticalGap - borderWidth;
		real topXright = panelWidth + borderWidth + verticalGap;
		real topYlower = panelHeight + horizontalGap;
		real topYupper = topYlower + borderWidth;
		
		sprintf(s, "WIRE 0.01 (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
		topXleft, topYupper, 
		topXright, topYupper,
		topXright, topYlower, 
		topXleft, topYlower,
		topXleft, topYupper
		);
		bigScript += s;

		//Draw left box
		real leftXleft = 0 - borderWidth - verticalGap;
		real leftXright =  0 - verticalGap;
		real leftYlower = 0 - horizontalGap + 0.02;
		real leftYupper = panelHeight + horizontalGap - 0.02;
		
		sprintf(s, "WIRE 0.01 (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
		leftXleft, leftYupper, 
		leftXright, leftYupper,
		leftXright, leftYlower, 
		leftXleft, leftYlower,
		leftXleft, leftYupper
		);
		bigScript += s;

		//Add three fiducials so that the panel cannot be reversed in the machine without CV noticing
		
		//Upper two fiducials live on one breakaway edge
		//Fiducials are not in center of border, they are nearer the panel so the clips don't obstruct their view
		real fiducial_x_1 = 0 + borderWidth + verticalGap;
		real fiducial_y_1 = panelHeight + horizontalGap + (borderWidth / 4);
		bigScript += "LAYER 1;\n"; //Top layer
		sprintf(s, "ADD FIDUCIAL-1X2@SPARKFUN-AESTHETICS (%f %f);\n", fiducial_x_1, fiducial_y_1);
		bigScript += s;
		if(hasBottomParts() == 1)
		{
			sprintf(s, "ADD FIDUCIAL-1X2@SPARKFUN-AESTHETICS MR0 (%f %f);\n", fiducial_x_1, fiducial_y_1);
			bigScript += s;
		}
		
		real fiducial_x_2 = panelWidth - borderWidth - verticalGap;
		real fiducial_y_2 = panelHeight + horizontalGap + (borderWidth / 4);
		sprintf(s, "ADD FIDUCIAL-1X2@SPARKFUN-AESTHETICS (%f %f);\n", fiducial_x_2, fiducial_y_2);
		bigScript += s;
		if(hasBottomParts() == 1)
		{
			sprintf(s, "ADD FIDUCIAL-1X2@SPARKFUN-AESTHETICS MR0 (%f %f);\n", fiducial_x_2, fiducial_y_2);
			bigScript += s;
		}

		//Lower one - larger fiducial
		real fiducial_x_3 = 0 + borderWidth + verticalGap;
		real fiducial_y_3 = 0 - horizontalGap - (borderWidth / 4);
		sprintf(s, "ADD FIDUCIAL-1.5X3@SPARKFUN-RETIRED (%f %f);\n", fiducial_x_3, fiducial_y_3);
		bigScript += s;
		if(hasBottomParts() == 1)
		{
			sprintf(s, "ADD FIDUCIAL-1.5X3@SPARKFUN-RETIRED MR0 (%f %f);\n", fiducial_x_3, fiducial_y_3);
			bigScript += s;
		}

		bigScript += "LAYER 1;\n"; //Top layer
	}

	//Load the appropriate DRC
	if(hasFourLayers() == 0)
	{
		bigScript += "DRC LOAD SparkFun-2-layer-PCBWay-LIMIT.dru;\n";
	}
	else
	{
		bigScript += "DRC LOAD SparkFun-4-layer-TIGHT.dru;\n";
	}

	//Update the polygon pours - This can take a long time
    //bigScript += "RATSNEST;\n";
	
    //Save our work
    bigScript += "SET CONFIRM YES;\n";
    bigScript += "WRITE;\n";
    bigScript += "SET CONFIRM OFF;\n";
}

//Look at board dimensions and components. If any components hang over edge then warn user.
void calculateDesignDimensions()
{
	//Find min/max dimensions of this board
    char firstPoint = 'y';
	char firstPointOverhang = 'y';
	
	board(B) {
        B.wires(W) {
            if (W.layer == LAYER_DIMENSION) {
                // Wire is on dimension layer
                real wx1 = u2inch(W.x1);
                real wy1 = u2inch(W.y1);
                real wx2 = u2inch(W.x2);
                real wy2 = u2inch(W.y2);

                // Start point of wire
                if (firstPoint == 'y') {
                    firstPoint = 'n';
                    xMax = wx1;
                    xMin = wx1;
                    yMax = wy1;
                    yMin = wy1;
                }
                else {
                    if (wx1 > xMax) {
                        xMax = wx1;
                    }
                    if (wx1 < xMin) {
                        xMin = wx1;
                    }
                    if (wy1 > yMax) {
                        yMax = wy1;
                    }
                    if (wy1 < yMin) {
                        yMin = wy1;
                    }
                }

                // End point of wire
                if (wx2 > xMax) {
                    xMax = wx2;
                }
                if (wx2 < xMin) {
                    xMin = wx2;
                }
                if (wy2 > yMax) {
                    yMax = wy2;
                }
                if (wy2 < yMin) {
                    yMin = wy2;
                }
            }
		}
	}
	
	//Check if this design has dimension lines. If it doesn't then it's probably a DXF import of an enclosure or something very weird.
	if(xMin == 0 && yMax == 0)
	{
		dlgMessageBox("!This board has no dimension lines. Cannot panelize. Exiting.");
		exit(-1);
	}
	
	//See if any elements of any components hang over the edge of the board dimension wires
	//Note this only looks at wires (silk lines, tdocu lines, etc). It doesn't check SMD pads
	//For example, see RedBoard: the SMD ISP header hangs over. This doesn't catch it.
	real overhang_xMax = xMax;
	real overhang_xMin = xMin;
	real overhang_yMax = yMax;
	real overhang_yMin = yMin;
	board(B) {
		B.elements(E) {
			E.package.wires(C) {

				real wx1 = u2inch(C.x1);
				real wy1 = u2inch(C.y1);
				real wx2 = u2inch(C.x2);
				real wy2 = u2inch(C.y2);
				
				if(wx1 > overhang_xMax)
				{
					overhang_xMax = wx1;
				}
				if(wx1 < overhang_xMin)
				{
					overhang_xMin = wx1;
				}
				if(wy1 > overhang_yMax)
				{
					overhang_yMax = wy1;
				}
				if(wy1 < overhang_yMin)
				{
					overhang_yMin = wy1;
				}

				if(wx2 > overhang_xMax)
				{
					overhang_xMax = wx2;
				}
				if(wx2 < overhang_xMin)
				{
					overhang_xMin = wx2;
				}
				if(wy2 > overhang_yMax)
				{
					overhang_yMax = wy2;
				}
				if(wy2 < overhang_yMin)
				{
					overhang_yMin = wy2;
				}
			}
		}

    }

	designWidth = xMax - xMin; //In inches
	designHeight = yMax - yMin;

	//Warn user if there is overhang
	if( (overhang_xMax > xMax) || (overhang_xMin < xMin) || 
	(overhang_yMax > yMax) || (overhang_yMin < yMin) ) {
		overHangingParts = "true";
		
		if(xMin < overhang_xMin) overhang_xMin = xMin;
		if(xMax > overhang_xMax) overhang_xMax = xMax;
		if(yMin < overhang_yMin) overhang_yMin = yMin;
		if(yMax > overhang_yMax) overhang_yMax = yMax;
		
		real overhangWidth = overhang_xMax - overhang_xMin;
		real overhangHeight = overhang_yMax - overhang_yMin;
		
		verticalGapNeeded = overhangWidth - designWidth;
		horizontalGapNeeded = overhangHeight - designHeight;
	}
}

string get_project_path() {
    if (board)     board(B)     return(filedir(B.name));
    if (schematic) schematic(B) return(filedir(B.name));
}

//Change any / in a string to \
//Useful for directory structure before calling a cmd
string convertForwardToBackSlashes(string thing)
{
	//Convert forward slashes to back slashes so we can run system command
	int pos = strrchr(thing, '/');
	while (pos >= 0) 
	{
		thing = strsub(thing, 0, pos) + "\\\\" + strsub(thing, pos + 1, strlen(thing)); //Remove and replace
		pos = strrchr(thing, '/'); //Look for the next forward slash
	}
	return(thing);
}

//Creates a sub directory to the project called \Panel to store the new panel brd file into
void createFile()
{
	//Get the name of this brd (no extension, no directory)
	string baseFileName = "";
	board(B) {
		baseFileName = filesetext(filename(B.name), ""); 
	}

    //See if this panel already exists. If yes, ask user to overwrite
    string a[];
	string projectDirectory = get_project_path();
    panelFileLocation = projectDirectory + "Production/" + baseFileName + "-Panel.brd";
	int n = fileglob(a, panelFileLocation);

    //Warn user we are about to overwrite a file of the same name
    if (n != 0)
    {
        if (dlgMessageBox("!You are about to write over a panel file.\nAre you sure?", "&Yes", "&No") != 0) {
            exit(0); //Bail
        }

        string s = "";
		bigScript += "SET CONFIRM YES;\n";
        sprintf(s, "REMOVE '%s';\n", panelFileLocation);
        bigScript += s;
        bigScript += "SET CONFIRM OFF;\n";
    }
	
	projectDirectory = convertForwardToBackSlashes(projectDirectory); //Convert forward slashes to back slashes so we can run system command
	
    string commandToRun = "cmd.exe /C IF NOT EXIST " + "\"" + projectDirectory + "\\Production\" md \"" + projectDirectory + "\\Production\""; // /K to keep window open
    if(system(commandToRun) != 0)
	{
		dlgMessageBox("Error: Command failed.", "OK");
	}	

}

//Record board thickness, soldermask color, silkscreen color, oz copper, and plating to a text file
void orderingInstructionsWrite()
{
	string orderingFile = get_project_path() + "Production/ordering_instructions.txt";
	
	//Convert panel dimensions to mm
	panelHeight *= 25.4;
	panelWidth *= 25.4;
	
	int numberOfLayers = 2;
	if(hasFourLayers() == 1) numberOfLayers = 4;
	
	string stencilsRequired = "none";
	//if(hasTopParts() && hasBottomParts()) stencilsRequired = "top+bottom";
	//else if(hasTopParts()) stencilsRequired = "top";
	//else if(hasBottomParts()) stencilsRequired = "bottom";
	if(generateTopStencil && generateBottomStencil) stencilsRequired = "top+bottom";
	else if(generateTopStencil) stencilsRequired = "top";
	else if(generateBottomStencil) stencilsRequired = "bottom";

	string boardThickness = getBoardThickness(); //Search for 0.8mm text on board
	string boardColor = getBoardColor(); //Search board for aesthetics to determine soldermask color
	
	string boardSilkColor = "White"; //Almost all boards have white silkscreen. Only the white soldermask boards (Google-IOIO) require black silk
	if(boardColor == "White")
	{
		boardSilkColor = "Black";
	}
	
	output(orderingFile){
		printf("panel size, %.0fx%.0fmm\n", ceil(panelWidth), ceil(panelHeight));
		printf("PCB thickness, %s\n", boardThickness);
		printf("number of layers, %d\n", numberOfLayers);
		printf("soldermask color, %s\n", boardColor);
		printf("silkscreen color, %s\n", boardSilkColor);
		printf("oz copper, %s\n", "1oz");
		printf("finish, %s\n", "HASL lead free");
		printf("stencils, %s\n", stencilsRequired);
	}
	
}


if (board)
{
	configRead(); //Read any settings if available

	createFile(); //Create a \Panel sub directory, overwrite any existing panel files

	calculateDesignDimensions(); //Detect any overhanging parts. It will set designWidth/designHeight
	
	//GUI
    int dstatus = dlgDialog("Panel Generation Options"){

		dlgLabel("All dimensions in inches");
		dlgGroup("Panel Size") {
			dlgHBoxLayout{ dlgLabel("X:\t");       dlgRealEdit(panelSizeX, 1, 20); } 
			dlgHBoxLayout{ dlgLabel("Y:\t");       dlgRealEdit(panelSizeY, 1, 20); } 
		}
		dlgGroup("Gaps") {

		if(overHangingParts == "true")
		{
			dlgHBoxLayout{ dlgLabel("<font color=red>Note:</font> This board has overhanging parts\t"); } 
			if(verticalGapNeeded > 0)
			{
				string s = "";
				sprintf(s, "Recommended Vertical Gap for Overhang: %.2f", verticalGapNeeded);
				dlgHBoxLayout{ dlgLabel(s); } 
			}

			if(horizontalGapNeeded > 0)
			{
				string s = "";
				sprintf(s, "Recommended Horizontal Gap for Overhang: %.2f", horizontalGapNeeded);
				dlgHBoxLayout{ dlgLabel(s); } 
			}
		}

		dlgHBoxLayout{ dlgLabel("Vertical Gap:\t");         	dlgRealEdit(verticalGap, 0.0, 2); } 
		dlgHBoxLayout{ dlgLabel("Horizontal Gap:\t");       	dlgRealEdit(horizontalGap, 0.0, 2); } 
		}
		  
		dlgGroup("Extra Production Bits") {
			dlgHBoxLayout{ dlgCheckBox("Add Panel Borders and Fiducials", drawPanelBorders); } 
			dlgHBoxLayout{ dlgCheckBox("Add V-score Lines and Text", vScoreIndicators); } 
		}

		dlgGroup("Stencil Generation") {
			if(hasBottomParts() == 1)
			{
				dlgHBoxLayout{ 
					dlgLabel("<font color=red>Note:</font> This board has parts on bottom side: <br>" + bottomPackages); 
				} 
			}
			
			dlgHBoxLayout{ dlgCheckBox("Top Stencil", generateTopStencil); } 
			if(hasBottomParts() == 1)
			{
				dlgHBoxLayout{ dlgCheckBox("Bottom Stencil", generateBottomStencil); } 
			}
		}

		if(hasFourLayers() == 1)
		{
			dlgHBoxLayout{ dlgLabel("<font color=red>Note:</font> This is a four layer board\t"); } 
			dlgHBoxLayout{ dlgLabel("\t"); } 
		}

		dlgGroup("Output Files") {
			dlgHBoxLayout{ dlgCheckBox("Run CAM after panelization", runCAM); } 
		}

		dlgPushButton("Generate") {
			configWrite(); //Record current settings
			
			panelizer(); //Create the panel

			orderingInstructionsWrite(); //Record board characteristics
			
			if(runCAM == 1)
			{
				bigScript += "RUN SparkFun-CAMmer.ulp;\n";
			}

			exit(bigScript); //Execute this generated script

			dlgAccept(-1);
		}           

		dlgStretch(1);
    };
	
	configWrite(); //Record current settings
	
}
else
{
    dlgMessageBox("Please run SparkFun Panelizer from a board.");
    exit(1);
}