#usage "en: <b>Copy a given board to fill a panel just over 75x75 mm with 0.25mm gap between designs to allow for V-score trench.</b> PCBWay requires the user to create panels that are at least 75x75mm. If the panel is smaller than this they will reject it because their v-score machine can't handle it. This ULP takes a given design and replicates it until the panel is just over 75x75mm. It also adds dimension lines between copies and v-score text so that PCBWay knows where to v-score."
"<p>Usage: run sparkx-panelizer</p>"
"<p>Author: <author>Nathan Seidle &lt;inathan@sparkfun.com&gt;</author><br />"
"Version: <em>1.0</em></p>"

//Original board dimension code came from https://gist.github.com/itavero/8042433

string bigScript = ""; //The big string of commands that we will eventually run as a script

/*


*/

string configFile  = filesetext(argv[0], ".cfg");

//Config options we want to save
real      verticalGap         = 0.02; //PCBWay needs at least 0.02 inches between copies
real      horizontalGap       = 0.02;
real      panelSizeX          = 3.0;
real      panelSizeY          = 2.0;

void configWrite(){
  output(configFile){
    printf("%.5f\n", verticalGap);
    printf("%.5f\n", horizontalGap);
    printf("%.5f\n", panelSizeX);
    printf("%.5f\n", panelSizeY);
  }
}

void configRead() {
  if(filesize(configFile)){ //Check if file exists
    string data[];
    int line = fileread(data, configFile);
    if(line >= 4){
      verticalGap           = strtod(data[0]);
      horizontalGap         = strtod(data[1]);
      panelSizeX          	= strtod(data[2]);
      panelSizeY       	    = strtod(data[3]);
    }
  }
}

real copyOversizeAmount = 0.1;
real designWidth; //In inches
real designHeight;
real xMax = 0;
real yMax = 0;
real xMin = 0;
real yMin = 0;

real overhang_xMax = 0;
real overhang_yMax = 0;
real overhang_xMin = 0;
real overhang_yMin = 0;

real verticalGapNeeded = 0;
real horizontalGapNeeded = 0;

string fourLayers = "false";

string panelFileLocation = "";


void panelizer() {
	
    string s = "";

	//Calculate the number of copies we need to achieve our min panel size
	int numberOfColumns = ceil(panelSizeX / (designWidth + verticalGap));
	if(numberOfColumns * (designWidth + verticalGap) + verticalGap < panelSizeX) numberOfColumns++;
	
	int numberOfRows = ceil(panelSizeY / (designHeight + horizontalGap));
	if(numberOfRows * (designHeight + horizontalGap) + horizontalGap < panelSizeY) numberOfRows++;

    //Turn off all layers but the ones we want to copy
	//Include 2 and 15 (layers for four layer board)
    bigScript += "DISPLAY NONE; DISPLAY 1 2 15 16 17 18 20 21 22 23 24 45; DISPLAY -25 -26 -27 -28 -51;\n";

    //Draw a box slightly larger that the dimensions of the board
	real lowerX = xMin - copyOversizeAmount;
	real lowerY = yMin - copyOversizeAmount;
	real upperX = xMax + copyOversizeAmount;
	real upperY = yMax + copyOversizeAmount;
	
    bigScript += "GRID INCH 0.05 ON;\n";

    sprintf(s, "GROUP (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", lowerX, lowerY, upperX, lowerY, upperX, upperY, lowerX, upperY, lowerX, lowerY);
    bigScript += s;

    //Cut from the lower left corner of group
    sprintf(s, "CUT (%f %f);\n", xMin, yMin);
    bigScript += s;

	//Create new board file
    bigScript += "SET CONFIRM YES;\n";
    sprintf(s, "EDIT %s;\n", panelFileLocation);
    bigScript += s;
    bigScript += "SET CONFIRM OFF;\n";

    //Go back to inch grid
	bigScript += "GRID INCH 0.05 ON;GRID ALT INCH 0.005;\n";

	//Turn on layers
    bigScript += "DISPLAY NONE; DISPLAY 1 2 15 16 17 18 20 21 22 23 24 45 51; DISPLAY -25 -26 -27 -28;\n";

	//Paste the copies to fill the panel
	real xCoord = 0;
	real yCoord = 0;
	for(int row = 0 ; row < numberOfRows ; row++)
	{
		for(int column = 0 ; column < numberOfColumns ; column++)
		{
			xCoord = (column * designWidth) + (column * verticalGap);
			yCoord = (row * designHeight) + (row * horizontalGap);

			bigScript += "SET CONFIRM YES;\n";
			sprintf(s, "PASTE (%f %f);\n", xCoord, yCoord);
			bigScript += s;
			bigScript += "SET CONFIRM OFF;\n";
			
			//Add 'route out' text if the gap between boards is large
			if(verticalGap > 0.05)
			{
				bigScript += "LAYER 20;\n"; //Dimension layer
				sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' R90 (%f %f);\n", xCoord - (verticalGap/2), yCoord + (designHeight/2));
				bigScript += s;

				if(column == numberOfColumns - 1) //Add last text
				{
					bigScript += "LAYER 20;\n"; //Dimension layer
					sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' (%f %f);\n", xCoord + (designWidth/2) + designWidth, yCoord - (horizontalGap/2));
					bigScript += s;
				}
			}

			if(horizontalGap > 0.05)
			{
				bigScript += "LAYER 20;\n"; //Dimension layer
				sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' (%f %f);\n", xCoord + (designWidth/2), yCoord - (horizontalGap/2));
				bigScript += s;
				
				if(row == numberOfRows - 1) //Add last text
				{
					bigScript += "LAYER 20;\n"; //Dimension layer
					sprintf(s, "CHANGE ALIGN CENTER; TEXT 'Route Out' (%f %f);\n", xCoord + (designWidth/2), yCoord - (horizontalGap/2));
					bigScript += s;
				}
			}

		}

	}
	
	//Add borders to four sides
	real borderWidth = 0.25;
	
	bigScript += "LAYER 20;\n"; //Dimension layer

	real panelWidth = (designWidth * numberOfColumns) + (verticalGap * (numberOfColumns - 1));
	real panelHeight = (designHeight * numberOfRows) + (horizontalGap * (numberOfRows - 1));

	//Draw lower box
	real lowerXleft = 0 - verticalGap - borderWidth;
	real lowerXright = panelWidth + borderWidth + verticalGap;
	real lowerYupper = 0 - horizontalGap;
	real lowerYlower = lowerYupper - borderWidth;
	
	sprintf(s, "WIRE (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
	lowerXleft, lowerYupper, 
	lowerXright, lowerYupper,
	lowerXright, lowerYlower, 
	lowerXleft, lowerYlower,
	lowerXleft, lowerYupper
	);
	bigScript += s;

	//Draw right box
	real rightXleft = panelWidth + verticalGap;
	real rightXright = rightXleft + borderWidth;
	real rightYupper = panelHeight + horizontalGap - 0.02;
	real rightYlower = 0 - horizontalGap + 0.02;
	
	sprintf(s, "WIRE (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
	rightXleft, rightYupper, 
	rightXright, rightYupper,
	rightXright, rightYlower, 
	rightXleft, rightYlower,
	rightXleft, rightYupper
	);
	bigScript += s;

	//Draw top box
	real topXleft = 0 - verticalGap - borderWidth;
	real topXright = panelWidth + borderWidth + verticalGap;
	real topYlower = panelHeight + horizontalGap;
	real topYupper = topYlower + borderWidth;
	
	sprintf(s, "WIRE (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
	topXleft, topYupper, 
	topXright, topYupper,
	topXright, topYlower, 
	topXleft, topYlower,
	topXleft, topYupper
	);
	bigScript += s;

	//Draw left box
	real leftXleft = 0 - borderWidth - verticalGap;
	real leftXright =  0 - verticalGap;
	real leftYlower = 0 - horizontalGap + 0.02;
	real leftYupper = panelHeight + horizontalGap - 0.02;
	
	sprintf(s, "WIRE (%f %f) (%f %f) (%f %f) (%f %f) (%f %f);\n", 
	leftXleft, leftYupper, 
	leftXright, leftYupper,
	leftXright, leftYlower, 
	leftXleft, leftYlower,
	leftXleft, leftYupper
	);
	bigScript += s;

	//Add three fiducials so that the panel cannot be reversed in the machine without CV noticing
	
	//Upper two fiducials live on one breakaway edge
	//Fiducials are not in center of border, they are nearer the panel so the clips don't obstruct their view
    bigScript += "USE SPARKFUN-AESTHETICS.LBR;\n";
	real fiducial_x_1 = 0 + borderWidth + verticalGap;
	real fiducial_y_1 = panelHeight + (borderWidth / 4);
	sprintf(s, "ADD FIDUCIAL-1X2 (%f %f);\n", fiducial_x_1, fiducial_y_1);
	bigScript += s;

	real fiducial_x_2 = panelWidth - borderWidth - verticalGap;
	real fiducial_y_2 = panelHeight + (borderWidth / 4);
	sprintf(s, "ADD FIDUCIAL-1X2 (%f %f);\n", fiducial_x_2, fiducial_y_2);
	bigScript += s;

	//Lower one - larger fiducial
    bigScript += "USE SPARKFUN-RETIRED.LBR;\n";
	real fiducial_x_3 = 0 + borderWidth + verticalGap;
	real fiducial_y_3 = 0 - (borderWidth / 4) - horizontalGap;
	sprintf(s, "ADD FIDUCIAL-1.5X3 (%f %f);\n", fiducial_x_3, fiducial_y_3);
	bigScript += s;

	//Load the appropriate DRC
	if(fourLayers == "false")
	{
		bigScript += "DRC LOAD SparkFun-2-layer-PCBWay-LIMIT.dru;\n";
	}
	else
	{
		bigScript += "DRC LOAD SparkFun-4-layer-TIGHT.dru;\n";
	}

	//Update the polygon pours - This can take a long time
    //bigScript += "RATSNEST;\n";
	
    //Save our work
    bigScript += "SET CONFIRM YES;\n";
    bigScript += "WRITE;\n";
    bigScript += "SET CONFIRM OFF;\n";
}

//Warn user if four layers are detected
void testFourLayer()
{
	fourLayers = "false";
	
	board(B) {
		B.layers(L) {
			if(L.used && L.number == 2)
			{
				fourLayers = "true";
			}
			if(L.used && L.number == 15)
			{
				fourLayers = "true";
			}
		}
	}

	if(fourLayers == "true")
	{
		dlgMessageBox("Whoa, this is a four layer board. We will pre-load the 4-layer DRU for you.");
	}
	
}

//Look at board dimensions and components. If any components hang over edge then warn user.
void calculateDesignDimensions()
{
	//Find min/max dimensions of this board
    char firstPoint = 'y';
	char firstPointOverhang = 'y';
	
	board(B) {
        B.wires(W) {
            if (W.layer == LAYER_DIMENSION) {
                // Wire is on dimension layer
                real wx1 = u2inch(W.x1);
                real wy1 = u2inch(W.y1);
                real wx2 = u2inch(W.x2);
                real wy2 = u2inch(W.y2);

                // Start point of wire
                if (firstPoint == 'y') {
                    firstPoint = 'n';
                    xMax = wx1;
                    xMin = wx1;
                    yMax = wy1;
                    yMin = wy1;
                }
                else {
                    if (wx1 > xMax) {
                        xMax = wx1;
                    }
                    if (wx1 < xMin) {
                        xMin = wx1;
                    }
                    if (wy1 > yMax) {
                        yMax = wy1;
                    }
                    if (wy1 < yMin) {
                        yMin = wy1;
                    }
                }

                // End point of wire
                if (wx2 > xMax) {
                    xMax = wx2;
                }
                if (wx2 < xMin) {
                    xMin = wx2;
                }
                if (wy2 > yMax) {
                    yMax = wy2;
                }
                if (wy2 < yMin) {
                    yMin = wy2;
                }
            }
		}
	}

	
	//See if any elements of any components hang over the edge of the board dimension wires
	//Note this only looks at wires (silk lines, tdocu lines, etc). It doesn't check SMD pads
	//For example, see RedBoard: the SMD ISP header hangs over. This doesn't catch it.
	overhang_xMax = xMax;
	overhang_xMin = xMin;
	overhang_yMax = yMax;
	overhang_yMin = yMin;
	board(B) {
		B.elements(E) {
			E.package.wires(C) {

				real wx1 = u2inch(C.x1);
				real wy1 = u2inch(C.y1);
				real wx2 = u2inch(C.x2);
				real wy2 = u2inch(C.y2);
				
				if(wx1 > overhang_xMax)
				{
					overhang_xMax = wx1;
				}
				if(wx1 < overhang_xMin)
				{
					overhang_xMin = wx1;
				}
				if(wy1 > overhang_yMax)
				{
					overhang_yMax = wy1;
				}
				if(wy1 < overhang_yMin)
				{
					overhang_yMin = wy1;
				}

				if(wx2 > overhang_xMax)
				{
					overhang_xMax = wx2;
				}
				if(wx2 < overhang_xMin)
				{
					overhang_xMin = wx2;
				}
				if(wy2 > overhang_yMax)
				{
					overhang_yMax = wy2;
				}
				if(wy2 < overhang_yMin)
				{
					overhang_yMin = wy2;
				}
			}
		}

    }

	designWidth = xMax - xMin; //In inches
	designHeight = yMax - yMin;

	//Warn user if there is overhang
	if( (overhang_xMax > xMax) || (overhang_xMin < xMin) || 
	(overhang_yMax > yMax) || (overhang_yMin < yMin) ) {
		
		if(xMin < overhang_xMin) overhang_xMin = xMin;
		if(xMax > overhang_xMax) overhang_xMax = xMax;
		if(yMin < overhang_yMin) overhang_yMin = yMin;
		if(yMax > overhang_yMax) overhang_yMax = yMax;
		
		real overhangWidth = overhang_xMax - overhang_xMin;
		real overhangHeight = overhang_yMax - overhang_yMin;
		
		verticalGapNeeded = overhangWidth - designWidth;
		horizontalGapNeeded = overhangHeight - designHeight;

		string warning = "";
		sprintf(warning, "An overhanging dimension was detected. Consider increasing gaps.\nBoard dimension: %.2fx%.2f\nOverall dimension: %.2fx%.2f\n\nVertical gap needed: %.2f\nHorizontal gap needed: %.2f", designWidth, designHeight, overhangWidth, overhangHeight, verticalGapNeeded, horizontalGapNeeded);
		dlgMessageBox(warning);
	}
}

string get_project_path() {
    if (board)     board(B)     return(filedir(B.name));
    if (schematic) schematic(B) return(filedir(B.name));
}

//Creates a sub directory to the project called \Panel to store the new panel brd file into
void createFile()
{
	//Get the name of this brd (no extension, no directory)
	string baseFileName = "";
	board(B) {
		baseFileName = filesetext(filename(B.name), ""); 
	}

    //See if this panel already exists. If yes, ask user to overwrite
    string a[];
	string projectDirectory = get_project_path();
    panelFileLocation = projectDirectory + "Production/" + baseFileName + "-Panel.brd";
    int n = fileglob(a, panelFileLocation);

    //Warn user we are about to overwrite a file of the same name
    if (n != 0)
    {
        if (dlgMessageBox("!You are about to write over a panel file.\nAre you sure?", "&Yes", "&No") != 0) {
            exit(0); //Bail
        }

        string s = "";
		bigScript += "SET CONFIRM YES;\n";
        sprintf(s, "REMOVE %s;\n", panelFileLocation);
        bigScript += s;
        bigScript += "SET CONFIRM OFF;\n";
    }

	//Convert forward slashes to back slashes so we can run system command
	int pos = strrchr(projectDirectory, '/');
	while (pos >= 0) 
	{
		projectDirectory = strsub(projectDirectory, 0, pos) + "\\\\" + strsub(projectDirectory, pos + 1, strlen(projectDirectory)); //Remove and replace
		pos = strrchr(projectDirectory, '/'); //Look for the next forward slash
	}
	
    string commandToRun = "cmd.exe /C IF NOT EXIST " + projectDirectory + "\\Production md " + projectDirectory + "\\Production"; ///K to keep window open
    if(system(commandToRun) != 0)
	{
		dlgMessageBox("Error: Command failed.", "OK");
	}	

}

if (board)
{
	testFourLayer(); //Detect if there are more than 2 copper layers

	configRead(); //Read any settings if available

	createFile(); //Create a \Panel sub directory, overwrite any existing panel files

	calculateDesignDimensions(); //Detect any overhanging parts. It will set designWidth/designHeight
	
	//GUI
    int dstatus = dlgDialog("Panel Generation Options"){

          dlgLabel("All dimensions in inches");
		  dlgGroup("Panel Size") {
			dlgHBoxLayout{ dlgLabel("X:\t");       dlgRealEdit(panelSizeX, 1, 20); } 
			dlgHBoxLayout{ dlgLabel("Y:\t");       dlgRealEdit(panelSizeY, 1, 20); } 
		  }
          dlgGroup("Gaps") {
			if(verticalGapNeeded > 0)
			{
				string s = "";
				sprintf(s, "Recommended Vertical Gap for Overhang: %.2f", verticalGapNeeded);
				dlgHBoxLayout{ dlgLabel(s); } 
			}

			if(horizontalGapNeeded > 0)
			{
				string s = "";
				sprintf(s, "Recommended Horizontal Gap for Overhang: %.2f", horizontalGapNeeded);
				dlgHBoxLayout{ dlgLabel(s); } 
			}


    	    dlgHBoxLayout{ dlgLabel("Vertical Gap:\t");         	dlgRealEdit(verticalGap, 0.02, 2); } 
            dlgHBoxLayout{ dlgLabel("Horizontal Gap:\t");       	dlgRealEdit(horizontalGap, 0.02, 2); } 
		  }

		  dlgPushButton("Generate Panel") {
    	    configWrite(); //Record current settings
		    panelizer(); //Create the panel
			
			exit(bigScript); //Execute this generated script

		    dlgAccept(-1);
		  }           
          dlgStretch(1);
    };
}
else
{
    dlgMessageBox("Please run SparkFun Panelizer from a board.");
    exit(1);
}