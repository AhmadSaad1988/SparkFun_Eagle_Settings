#usage "en: <b>Outputs the contents of a design to Sparkle Friendly list</b> "
"<p>Usage: run SparkFun-BOM_Generator</p>"
"<p>Author: <author>Owen Lyke, Nathan Seidle &lt;owen.lyke@sparkfun.com&gt;</author><br />"
"Version: <em>1.0</em></p>"


/*

#usage "en: <b>Outputs the contents of a design to Sparkle Friendly list</b> PCBWay requires the user to create panels that are at least 75x75mm. If the panel is smaller than this they will reject it because their v-score machine can't handle it. This ULP takes a given design and replicates it until the panel is just over the dimensions specified by the user. It also adds dimension lines between copies and v-score text so that PCBWay knows where to v-score. This script will also detect overhanging parts and warn the user that gaps are needed. Script tries to identify the soldermask color based on the logos on the board (SparkFun vs SparkX vs LilyPad). Script looks for 0.8mm tag for thin boards. Script outputs a ordering_instructions.txt file containing all the characteristics of this panel."
"<p>Usage: run bom_sparkle</p>"
"<p>Author: <author>Nathan Seidle &lt;inathan@sparkfun.com&gt;</author><br />"
"Version: <em>1.0</em></p>"

*/


// Modified October 2018, Owen Lyke
/*

Modification goals: 
- improve detection of false positives (a part that is on the board but doesn't exactly match a production part that can be used)
	* previous method was to search the part name and make sure it included the value

- output a format that sparkle can handle to automatically set the quantity (this depends on SWIT adding this functionality in sparkle first)
	* currently in-progress, requires SWIT support but can be easily adapted into the output format when needed

- improve detetion of on-board vs no-package components
	* answered by allowing the user to flag entries as "BOM" or "Non-BOM" while still not missing any board elements
	* also looping through boad elements as opposed to schematic elements helps

*/


// string ulpName = "SparkFun-BOM_Generator";
string ulpName = argv[0];
int setup_complete = 0;
int redraw = 1;

int element_status_unknown = 0;
int element_status_valid = 1;
int element_status_invalid = 2; 

// Master lists
string prod_ids[];
string package_names[];
string values[];
string names[];
int quantities[];
int element_status[];
int element_is_filtered[];
int element_is_pure_silk[];
int numElements = 0;

string prod_id_warning = "";


// These three sets of lists are generated from the master lists above depending on qualities of the elements
string invalidlistarry[];
int invalidSort = 0;
int invalidSelected = -1;
int invalid_index_map[];

string validlistarry[];
int validSort = 0;
int validSelected = -1;
int valid_index_map[];

string filteredlistarry[];
int filteredSort = 0;
int filteredSelected = -1;
int filtered_index_map[];

string silklistarry[];
int silkSort = 0;
int silkSelected = -1;
int silk_index_map[];

int validCount = 0;
int invalidCount = 0;
int filteredCount = 0;
int silkCount = 0;

// A string for sparkle output
string sparkleBOM;


// 
string configFile  = filesetext(argv[0], ".flt");
string filterStrings[] = {"fiducial", "stand-off"};
int filters_active = 1;
string filterStatus[] = {"off", "on"};
int filter_string_selected = -1;
int filter_string_sort = 0;
string temp_filter_string = "AddFilterHere";
string customFilterFile = "";
string numFilteredItems = "";

void configWrite(string outfile){
  output(outfile){
  	int index = 0;
    while(filterStrings[index] != ""){
    	printf("%s\n", filterStrings[index]);
    	index++;
    }
  }
}


int configRead(string infile) {
  if(filesize(infile)){ //Check if file exists

	int indk = 0;
	while(filterStrings[indk] != ""){
		filterStrings[indk] = "";
		indk++;
	}

    string data[];
    int line = fileread(data, infile);

    if(line)
    {
    	int indi = 0;
    	while(data[indi] != ""){
	    	filterStrings[indi] = data[indi];
	    	indi++;
	    }
  	}
  	return 0;
  }
  else
  {
	  // dlgMessageBox("Warning, your filter file appears to be empty");
	  // dlgDialog("Nonexistent Filter File"){
	  // 	dlgLabel("The default filter file was not found, ")
	  // 	dlgPushButton("Create / Overwrite Filter file"){

	  // 	}
	  // }
  	// configWrite(string infile){
  	return 1;
  }
  
}

void removeFromFilterList()
{
	if(filter_string_selected == -1){ return; }
	
	int indi = filter_string_selected;
	while(filterStrings[indi] != "")
	{
		filterStrings[indi] = filterStrings[indi+1];
		indi++;
	}
}

void addToFilterList()
{
	if(temp_filter_string != "AddFilterHere"){
		int indi = 0;
		while(filterStrings[indi] != "")
		{
			indi++;
		}	

		filterStrings[indi] = temp_filter_string;
		temp_filter_string = "AddFilterHere";
	}
}


string pidFormat(string id_str)
{
	string numeral_entries[];
	int numEntries = strsplit(numeral_entries, id_str, '-');
	if(numEntries < 2)
	{
		// dlgMessageBox("Too few entries found in the product id");
		return "NaN";
	}
	string numerals = numeral_entries[1];
	while(numerals[0] == '0')
	{
		string t = strsub(numerals, 1, strlen(numerals));
		numerals = t;
	}

	return numerals;
}

void generateSparkleList()
{
	int invalidPIDcount = 0;
	sparkleBOM = "";
	for(int indi = 0; indi < validCount; indi++)
	{
		string temp = "";
		string prod_id = prod_ids[valid_index_map[indi]];
		string idNUM = pidFormat(prod_id);
		if(idNUM == "NaN"){
			invalidPIDcount++;
		}
		else if(indi < (validCount - 1))
		{
			sprintf(temp, "%s,", idNUM);
		}
		else
		{
			sprintf(temp, "%s", idNUM);
		}
		sparkleBOM += temp;
	}

	if(invalidPIDcount)
	{
		// string msg = "";
		// sprintf(msg, "Warning: %d items in BOM list without PROD_ID", invalidPIDcount);

		sprintf(prod_id_warning, "Warning: %d BOM items have no PROD_ID!", invalidPIDcount);
		// dlgMessageBox(msg);
	}
	else{
		sprintf(prod_id_warning, "All BOM items have PROD_ID. Good job :D");
	}
}

//Finds a string in a string no matter where, no matter capitalization
int containsString(string toSearch, string toFind)
{
	int pos = strstr(strlwr(toSearch), strlwr(toFind));
	if(pos >= 0) //String found
	{
		return(1);
	}
	return(0);	
}

int filterMatch(string str)
{
	// Checks if str contains any of the filter strings
	int retval = 0; // Begin with no match
	int indi = 0;
	while(filterStrings[indi] != "")
	{
		if(containsString(str, filterStrings[indi]))
		{
			retval = 1;
		}
		indi++;
	}
	return retval;
}

void applyFilters()
{
	for(int indi = 0; indi < numElements; indi++)
	{
		if(element_status[indi] == element_status_valid)
		{
			element_is_filtered[indi] = 0; // Remove filter tag from any "valid" (BOM item) element
		}
		else
		{
			// If the item is not valid (i.e. not a BOM item) then run the filter application to determine if it should be filtered
			if(filterMatch(package_names[indi]))
			{
				element_is_filtered[indi] = 1;
			}
			else
			{
				element_is_filtered[indi] = 0;
			}
		}
	}
}

void categorizeElements()
{
	// Clear out the old lists
	for(int indk = 0; indk < validCount; indk++){
		validlistarry[indk] = "";
		valid_index_map[indk] = -1;
	}
	for(int indj = 0; indj < invalidCount; indj++)
	{
		invalidlistarry[indj] = "";
		invalid_index_map[indj] = -1;
	}
	for(int indl = 0; indl < filteredCount; indl++)
	{
		filteredlistarry[indl] = "";
		filtered_index_map[indl] = -1;
	}
	for(int indm = 0; indm < silkCount; indm++)
	{
		silklistarry[indm] = "";
		silk_index_map[indm] = -1;
	}

	// Reset the counters
	validCount = 0;
	invalidCount = 0;
	filteredCount = 0;
	silkCount = 0;

	applyFilters();	// Sets the "is filtered" state for any elements in the NON-Bom list

	// Recategorize the elements from the master lists
	for(int indi = 0; indi < numElements; indi++)
	{
		string temp = "";
		sprintf(temp, "%d\t%s\t%s\t%s", quantities[indi], prod_ids[indi], package_names[indi], names[indi]);
		if(element_status[indi] == element_status_valid){
			validlistarry[validCount] = temp;
			valid_index_map[validCount] = indi;
			validCount++;
		}
		else if(element_status[indi] == element_status_invalid)
		{
			if(element_is_pure_silk[indi] == 1)
			{
				silklistarry[silkCount] = temp;
				silk_index_map[silkCount] = indi;
				silkCount++;
			}
			else if(element_is_filtered[indi])
			{
				if(filters_active)			/// When the filters are turned on put filtered items in their own list
				{
					filteredlistarry[filteredCount] = temp;
					filtered_index_map[filteredCount] = indi;
					filteredCount++;
				}
				else						// Otherwise keep them in the "NON-BOM" list
				{
					invalidlistarry[invalidCount] = temp;
					invalid_index_map[invalidCount] = indi;
					invalidCount++;
				}
			}
			else
			{
				invalidlistarry[invalidCount] = temp;
				invalid_index_map[invalidCount] = indi;
				invalidCount++;
			}
		}
		else{
			// Problems have arisen
		}
	}

	sprintf(numFilteredItems, "%d", filteredCount);	// Show how many items are hidden

	generateSparkleList();
}


if(schematic)
{
	exit("edit .brd; run " + ulpName);
}
if(board)
{

	int cnfrdres = configRead(configFile);
	if(cnfrdres){
		configWrite(configFile);
	}


	// This loop does the initial categorization of all the components. 
	// It is based off of only existence of PROD_ID or not
	board(B){
		B.elements(E){

			string element_prod_id = E.attribute["PROD_ID"];
			string element_package_name = E.package.name;
			string element_value = E.attribute["Value"];
			string element_name = E.name;

			int match = 0;
			int indi = 0;



			if(element_prod_id)
			{
				// Search by product id
				for(int indi = 0; indi < numElements; indi++)
				{
					if(prod_ids[indi] == element_prod_id)
					{
						quantities[indi]++;
						match = 1;
					}
				}
				if(match == 0)
				{
					
					prod_ids[numElements] = element_prod_id;
					package_names[numElements] = element_package_name;
					quantities[numElements] = 1;
					values[numElements] = element_value;
					names[numElements] = element_name;
					element_status[numElements] = element_status_valid;
					element_is_filtered[numElements] = 0; // No initial filter
					element_is_pure_silk[numElements] = 0; // elements with PROD_ID are not labels (almost 100% true... so im going with it)
					numElements++;
				}
			}
			else{

				// Test for pure-silkness
				//If this element has pads then it's not a label
				int isALabel = 1;
				int padCount = 0;
				E.footprint.contacts(C)
				{
					padCount++;
				}
				if(padCount > 0) isALabel = 0;
				//If this element has a hole then it's not a label
				int holeCount = 0;
				E.footprint.holes(H)
				{
					holeCount++;
				}
				if(holeCount > 0) isALabel = 0;



				// Search by package
				for(int indi = 0; indi < numElements; indi++)
				{
					if(package_names[indi] == element_package_name)
					{
						quantities[indi]++;
						match = 1;
					}
				}
				if(match == 0)
				{
					
					prod_ids[numElements] = "";
					package_names[numElements] = element_package_name;
					quantities[numElements] = 1;
					values[numElements] = element_value;
					names[numElements] = element_name;
					element_status[numElements] = element_status_invalid;
					element_is_filtered[numElements] = 0; // No initial filter
					element_is_pure_silk[numElements] = isALabel;
					numElements++;
				}
			}
		}
	}


	categorizeElements();


	// while(setup_complete != 1){

		dlgDialog("BOM Output"){

			dlgTabWidget {
				dlgTabPage("BOM View") {
					dlgHBoxLayout {

						dlgVBoxLayout{
							// BOM items
							dlgLabel("BOM Items");
							dlgListView("Qty\tPROD_ID\tPackage\tExample Name", validlistarry, validSelected, validSort);

							dlgPushButton("Move to Non-BOM") { 
								if(validSelected != -1)
								{
									element_status[valid_index_map[validSelected]] = element_status_invalid;
									categorizeElements();
								}
							}
						}

						dlgVBoxLayout{
							// Non-BOM items
							dlgHBoxLayout{
								dlgLabel("Non-BOM Items");
								
							}
							// dlgStretch(1);
							dlgListView("Qty\tPROD_ID\tPackage\tExample Name", invalidlistarry, invalidSelected, invalidSort);
							dlgPushButton("Move to BOM"){ 
								if(invalidSelected != -1)
								{
									element_status[invalid_index_map[invalidSelected]] = element_status_valid;
									categorizeElements();
								}
							}					
						}

						// Filters
						dlgVBoxLayout{

							dlgLabel("Welcome to the BOM utility!");
							dlgPushButton("BOM Utility Help/Info/FAQ"){
								dlgDialog("NBOM Utility Info"){
									dlgLabel("This ULP lets you confidently keep track of all the elements on your board\n\
\n\
The main feature is the ability to change which items are considered to be part of the BOM.\n\
There are two ways of doins this:\n\
\t- 1) Manually move items from \"BOM Items\" to \"Non-BOM Items\" and back using the buttons below each list\n\
\t- 2) Apply a filter on the package names to exclude them from the \"Non-BOM Items\" list.\n\
\n\
* Notes: \n\
t- Items that have no PROD_ID, no contacts, and no holes are considered \"Non-Hardware\" and are excluded from BOM permanently\n\
\t- You can toggle the filter to see what is hidden from the \"Non-BOM Items\" list\n\
\t- Items in the \"BOM Items\" list are not affected by filters, so you can manually override a filter.\n\
\t- A defualt ilter file is loaded on startup, if present. You can also write your own filter files and load them.\n\
\t\t (each line of the text file is a filter entry)\n\
\t- The sparkle output will let you know how many BOM items are missing a PROD_ID (these are not displayed in the sparkle CSV)");
									// dlgListView("Qty\tPROD_ID\tPackage\tExample Name", silklistarry, silkSelected, silkSort);
									dlgPushButton("Close"){
										dlgAccept();
									}
								};
							}
							// dlgLabel("Filte");
							dlgHBoxLayout{
								dlgVBoxLayout{
									dlgLabel("Filters status: (double click to change)");
									dlgListBox(filterStatus, filters_active) categorizeElements();
								}
								dlgVBoxLayout{
									dlgLabel("Number of filtered items (hidden from the Non-BOM list):");
									dlgTextView(numFilteredItems);
								}
							}
							// dlgPushButton("Toggle Filters"){ 
							// 	if(filters_active == 1){ filters_active = 0; }
							// 	else{ filters_active = 1; }
							// 	categorizeElements();
							// }
							dlgPushButton("View Non-Hardware Items"){
								dlgDialog("Non-Hardware Elements"){
									dlgLabel("Stuff");
									dlgListView("Qty\tPROD_ID\tPackage\tExample Name", silklistarry, silkSelected, silkSort);
									dlgPushButton("Close"){
										dlgAccept();
									}
								};
							}
						}
					}
				}
				dlgTabPage("Filter Settings") {
					// Filter Modification
					dlgLabel("Current Filter Strings \n(Apply only to items in the Non-BOM list - initially any item with a PROD_ID is displayed)");
					dlgListView("Filter", filterStrings, filter_string_selected, filter_string_sort);
					dlgPushButton("Remove from filter list"){
						removeFromFilterList();
						categorizeElements();
					}

					dlgLabel("Add new filters");
					dlgTextEdit(temp_filter_string);
					dlgPushButton("Add to filter list"){
						addToFilterList();
						categorizeElements();
					}

					dlgHBoxLayout{
						dlgPushButton("Load filter cnfg file"){
							customFilterFile = dlgFileOpen("Select a filter cnfiguration file (.flt)", path_ulp[0], "*.flt");
							configRead(customFilterFile);
							categorizeElements();
						}
						dlgPushButton("Save as default cnfg"){
							configWrite(configFile);
							categorizeElements();
						}
					}
				}
				dlgTabPage("Sparkle Output") {
					dlgLabel("CSV of PROD_IDs for Sparkle");
					dlgTextView(sparkleBOM);
					dlgLabel("PROD_ID Status:");
					dlgTextView(prod_id_warning);
				}
	    	}




	 		dlgGridLayout {

	 			dlgCell(0, 0){ 
	 				dlgPushButton("Done"){
	 					setup_complete = 1;
	 					// result = 0;
						dlgAccept();
					};
				};
	 		}

		};
	// }

	exit(0);
}
else
{
	dlgMessageBox("Please run this ulp from the board editor");
	exit(1);
}